# An example front-end application, built with React.
- name: admin-fe
  source:
    root: admin-fe
  type: nodejs:14
  build:
    flavor: none
  hooks:
      build: |
        yarn install
        yarn build
  dependencies:
    nodejs:
        yarn: "*"
  web:
    locations:
        "/":
            root: "build"
            index:
                - "index.html"
            expires: 300s
            scripts: true
            allow: false
            rules:
                \.(css|js|gif|jpe?g|png|ttf|eot|woff2?|otf|html|ico|svg?)$:
                    allow: true
                ^/robots\.txt$:
                    allow: true
- name: settings-fe
  source:
    root: settings-fe
  type: nodejs:14
  build:
    flavor: none
  hooks:
    build: |
      yarn install
      yarn build
  dependencies:
    nodejs:
      yarn: "*"
  web:
    locations:
      "/":
        root: "build"
        index:
          - "index.html"
        expires: 300s
        scripts: true
        allow: false
        rules:
          \.(css|js|gif|jpe?g|png|ttf|eot|woff2?|otf|html|ico|svg?)$:
            allow: true
          ^/robots\.txt$:
            allow: true
# A simple API gateway built with Krakend
- name: api-gateway
  source:
    root: api-gateway
  type: golang:1.17
  hooks:
    build: ./install.sh
  web:
    commands:
      start: ./krakend run -c krakend.json -d
  relationships:
    settings-service: "settings-service:http"
    assets-service: "assets-service:http"
    data-connector-service: "data-connector-service:http"
    keycloack: "user-management-service:http"
    vault: "vault:http"
# The settings service
- name: settings-service
  source:
    root: settings-service
  type: nodejs:14
  web:
    commands:
      start: node index.js
  relationships:
    rediscache: 'redis:redis'
# The assets service
- name: assets-service
  source:
    root: assets-service
  type: 'python:3.9'
  hooks:
    build: pip install -r requirements.txt
  mounts:
    'network_dir':
        source: service
        service: files
        source_path: our_stuff
  relationships:
    database: "dbpostgres:admin"
    reports: "dbpostgres:reporter"
    search: "es:elasticsearch"
  web:
    commands:
        start: python server.py
# Python worker.
  workers:
    python_queue_handler:
        commands:
            start: sleep infinity
# Data Connector service
- name: data-connector-service
  source:
    root: data-connector-service
  type: "java:11"
  disk: 512
  hooks:
    build:  mvn clean package
  web:
    commands:
        start: java -jar -Xmx$(jq .info.limits.memory /run/config.json)m -XX:+ExitOnOutOfMemoryError -Djboss.http.port=$PORT target/app-wildfly.jar
# User management service (Keycloak)
- name: 'user-management-service'
  type: 'java:11'
  source:
      root: user-management-service
  disk: 1024
  variables:
      env:
          KC_VERSION: 8.0.2
          JBOSS_HOME: /app
          JDBC_MARIADB_VERSION: 2.2.3
          LAUNCH_JBOSS_IN_BACKGROUND: 1
  hooks:
      build: ./build.sh
  relationships:
      database: 'keycloak-database:mariadb'
  web:
      commands:
          start: ./start.sh
      locations:
          /:
              passthru: true
  mounts:
      'standalone/data':
          source: local
          source_path: data
      'standalone/configuration':
          source: local
          source_path: configuration
      'standalone/log':
          source: local
          source_path: log
      'standalone/deployments':
          source: local
          source_path: deployments
      'standalone/tmp':
          source: local
          source_path: tmp
# Vault. Platform.sh also support Vault as a managed service: https://docs.platform.sh/configuration/services/vault.html
-   name: vault
    type: 'golang:1.15'
    source:
        root: vault
    disk: 256
    hooks:
        build: ./install.sh
    mounts:
        "/data":
            source: local
            source_path: data
    web:
        upstream:
            socket_family: tcp
            protocol: http
        commands:
            start: ./vault server -config=/app/conf/config.hcl
        locations:
            /:
                allow: false
                passthru: true
